/**
 * @author yangxiong
 * V 1.0.0
 * Create at 2014-9-18 上午10:23:30
 */
package com.gionee.client.business.util;

import java.io.UnsupportedEncodingException;
import java.util.UUID;

import android.content.Context;
import android.content.SharedPreferences;
import android.provider.Settings.Secure;
import android.telephony.TelephonyManager;

/**
 * com.gionee.client.business.util.UIDUtils
 * 
 * @author yangxiong <br/>
 * @date create at 2014-9-18 上午10:23:30
 * @description TODO
 */

public class DeviceUuidFactory {
    private static final String TAG = "DeviceUuidFactory";
    private static final String PREFS_FILE = "device_id.xml";
    private static final String PREFS_DEVICE_ID = "device_id";
    private static UUID mUuid;

    public DeviceUuidFactory(Context context) {

        synchronized (DeviceUuidFactory.class) {
            if (mUuid == null) {
                final SharedPreferences prefs = context.getSharedPreferences(PREFS_FILE, 0);
                final String id = prefs.getString(PREFS_DEVICE_ID, null);

                if (id != null) {
                    // Use the ids previously computed and stored in the prefs file
                    mUuid = UUID.fromString(id);
                    LogUtils.logd(TAG, LogUtils.getThreadName() + " uuid = " + mUuid);
                } else {

                    final String androidId = Secure
                            .getString(context.getContentResolver(), Secure.ANDROID_ID);

                    LogUtils.logd(TAG, LogUtils.getThreadName() + " androidId = " + androidId);

                    // Use the Android ID unless it's broken, in which case fallback on deviceId,
                    // unless it's not available, then fallback on a random number which we store
                    // to a prefs file
                    try {
                        if (!"9774d56d682e549c".equals(androidId)) {
                            mUuid = UUID.nameUUIDFromBytes(androidId.getBytes("utf8"));
                        } else {
                            final String deviceId = ((TelephonyManager) context
                                    .getSystemService(Context.TELEPHONY_SERVICE)).getDeviceId();
                            mUuid = deviceId != null ? UUID.nameUUIDFromBytes(deviceId.getBytes("utf8"))
                                    : UUID.randomUUID();
                        }
                    } catch (UnsupportedEncodingException e) {
                        e.printStackTrace();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    // Write the value out to the prefs file
                    prefs.edit().putString(PREFS_DEVICE_ID, mUuid.toString()).commit();

                }

            }
        }

    }

    /**
     * Returns a unique UUID for the current android device. As with all UUIDs, this unique ID is
     * "very highly likely" to be unique across all Android devices. Much more so than ANDROID_ID is.
     * 
     * The UUID is generated by using ANDROID_ID as the base key if appropriate, falling back on
     * TelephonyManager.getDeviceID() if ANDROID_ID is known to be incorrect, and finally falling back on a
     * random UUID that's persisted to SharedPreferences if getDeviceID() does not return a usable value.
     * 
     * In some rare circumstances, this ID may change. In particular, if the device is factory reset a new
     * device ID may be generated. In addition, if a user upgrades their phone from certain buggy
     * implementations of Android 2.2 to a newer, non-buggy version of Android, the device ID may change. Or,
     * if a user uninstalls your app on a device that has neither a proper Android ID nor a Device ID, this ID
     * may change on reinstallation.
     * 
     * Note that if the code falls back on using TelephonyManager.getDeviceId(), the resulting ID will NOT
     * change after a factory reset. Something to be aware of.
     * 
     * Works around a bug in Android 2.2 for many devices when using ANDROID_ID directly.
     * 
     * @see http://code.google.com/p/android/issues/detail?id=10603
     * 
     * @return a UUID that may be used to uniquely identify your device for most purposes.
     */
    public UUID getDeviceUuid() {
        return mUuid;
    }
}
